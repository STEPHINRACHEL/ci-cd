#!groovy
@Library('delorean-pipeline-library') _

String githubEventStr = params.sqs_body
String gitBranch = ""
String prUrl = ""
def productAndType
String targetBranch = ""

currentBuild.description = "sqsMessageId: ${params.sqs_messageId}"

node {
    cleanWs()
    stage('Parse GitHub Event') {
        def ghEvent = readJSON text: githubEventStr

        if (ghEvent.eventType == "push") {
            gitBranch = ghEvent['ref'].tokenize('/').last()
            currentBuild.description = "${currentBuild.description}\nevent: push\nbranch: ${gitBranch}"
        }

        if (ghEvent.eventType == "pull_request") {
            def pullRequest = ghEvent.pull_request
            prUrl = pullRequest.html_url
            gitBranch = pullRequest.head.ref

            currentBuild.description = "${currentBuild.description}\nevent: pull_request\nbranch: ${gitBranch}\npr: ${prUrl}"
        }

        def branchParts = gitBranch.split('_') as List
        productAndType = branchParts[0]
        targetBranch = branchParts[1] ?: 'master'
        println "branch: $gitBranch, productAndType:$productAndType, targetBranch:$targetBranch"
    }

    stage('Trigger branch job') {
        when(productAndType.endsWith("-ga") || productAndType.endsWith("-rc") || productAndType.endsWith("-latest")) {
            def branchType = productAndType.split("-").last()
            def productName = productAndType.minus("-${branchType}")
            println "Delorean branch($branch), run branch job for ${productName}/${branchType}"
            def jobName = "delorean-1-ews/${productName}/${branchType}/branch"
            def jobParams = [
                    [$class: 'StringParameterValue', name: 'installationProductBranch', value: gitBranch],
                    [$class: 'StringParameterValue', name: 'installationTargetBranch', value: targetBranch]
            ]
            println "jobName:$jobName, jobParams:$jobParams"
            build job: jobName, parameters: jobParams, wait: false
        }
    }
}
