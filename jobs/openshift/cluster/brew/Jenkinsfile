#!groovy

def clusterOptions = [:]

def verifyClusterOptions(options) {
    if (!options.openshiftMasterUrl || !options.productName || !options.clusterAdminUsername || !options.clusterAdminPassword) {
        def clusterAdminCredentials = setClusterAdminCredentials()
        def userInput = input message: 'Installer Options', parameters: [
                string(defaultValue: (options.openshiftMasterUrl ?: ''), description: 'OpenShift cluster public URL', name: 'openshiftMasterUrl'),
                string(defaultValue: (options.productName ?: ''), description: 'MW Product Name', name: 'productName'),
                string(defaultValue: (options.clusterAdminUsername ?: clusterAdminCredentials.clusterAdminUsername), description: 'OpenShift cluster admin username', name: 'clusterAdminUsername'),
                string(defaultValue: (options.clusterAdminPassword ?: clusterAdminCredentials.clusterAdminPassword), description: 'OpenShift cluster admin password', name: 'clusterAdminPassword'),
        ]
        options.openshiftMasterUrl = userInput.openshiftMasterUrl
        options.productName = userInput.productName
        options.clusterAdminUsername = userInput.clusterAdminUsername
        options.clusterAdminPassword = userInput.clusterAdminPassword
        verifyClusterOptions(options)
    }
}

def setClusterAdminCredentials() {
    def integreatlyCredentialsID = 'tower-openshift-cluster-credentials'
    def clusterAdminCredentials = [:]
    withCredentials([usernamePassword(credentialsId: integreatlyCredentialsID, usernameVariable: 'CLUSTER_ADMIN_USERNAME', passwordVariable: 'CLUSTER_ADMIN_PASSWORD')]) {
        clusterAdminCredentials.clusterAdminUsername = "${CLUSTER_ADMIN_USERNAME}"
        clusterAdminCredentials.clusterAdminPassword = "${CLUSTER_ADMIN_PASSWORD}"
    }

    return clusterAdminCredentials
}

String getHost(String url) {
    URI uri = new URI(url);
    String[] urlParts = uri.getHost().split(/\./).takeRight(3)
    return urlParts.join('.')
}

String brewContainerRegistry = "brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888"
String rhContainerRegistry = "registry.redhat.io"
String rhContainerRegistry2 = "registry.access.redhat.com"

//AMQ Online 1.1.0 https://errata.devel.redhat.com/advisory/41188
//3scale 2.5.0 https://errata.devel.redhat.com/advisory/39834
//Fuse 7.3.0 https://errata.devel.redhat.com/advisory/41251 (https://issues.jboss.org/browse/ENTESB-10488)
def brewBuildsRaw = [
        'amq-online': [
                "amq7-amq-online-1-topic-forwarder-openshift-container-1.1-4",
                "amq7-amq-online-1-address-space-controller-openshift-container-1.1-4",
                "amq7-amq-online-1-agent-openshift-container-1.1-4",
                "amq7-amq-online-1-api-server-openshift-container-1.1-4",
                "amq7-amq-online-1-auth-plugin-openshift-container-1.1-4",
                "amq7-amq-online-1-broker-plugin-openshift-container-1.1-4",
                "amq7-amq-online-1-console-httpd-openshift-container-1.1-4",
                "amq7-amq-online-1-console-init-openshift-container-1.1-4",
                "amq7-amq-online-1-controller-manager-openshift-container-1.1-4",
                "amq7-amq-online-1-iot-auth-service-openshift-container-1.1-4",
                "amq7-amq-online-1-iot-gc-openshift-container-1.1-4",
                "amq7-amq-online-1-iot-http-adapter-openshift-container-1.1-6",
                "amq7-amq-online-1-iot-mqtt-adapter-openshift-container-1.1-4",
                "amq7-amq-online-1-iot-device-registry-file-openshift-container-1.1-3",
                "amq7-amq-online-1-iot-proxy-configurator-openshift-container-1.1-5",
                "amq7-amq-online-1-iot-tenant-service-openshift-container-1.1-4",
                "amq7-amq-online-1-mqtt-gateway-openshift-container-1.1-4",
                "amq7-amq-online-1-mqtt-lwt-openshift-container-1.1-4",
                "amq7-amq-online-1-none-auth-service-openshift-container-1.1-4",
                "amq7-amq-online-1-service-broker-openshift-container-1.1-4",
                "amq7-amq-online-1-standard-controller-openshift-container-1.1-4]"
        ],
        '3scale': [
                "3scale-amp25/apicast-gateway:1.14-8",
                "3scale-amp25/backend:1.8-1",
                "3scale-amp25/system:1.9-8",
                "3scale-amp25/zync:1.8-3",
                "3scale-amp25/3scale-operator:1.8-4"
        ],
        'fuse-online': [
                "fuse7/fuse-java-openshift:1.3-9",
                "fuse7/fuse-karaf-openshift:1.3-6",
                "fuse7/fuse-console:1.3-5",
                "fuse7/fuse-console-operator:1.3-3",
                "fuse7/fuse-eap-openshift:1.3-3",
                "fuse7/fuse-apicurito-generator:1.3-4",
                "fuse7/fuse-apicurito:1.3-4",
                "fuse7/apicurito-operator:1.0-5",
                "fuse7/fuse-ignite-meta:1.3-14",
                "fuse7/fuse-ignite-s2i:1.3-14",
                "fuse7/fuse-ignite-ui:1.3-9",
                "fuse7/fuse-ignite-server:1.3-14",
                "fuse7/fuse-ignite-upgrade:1.3-8",
                "fuse7/fuse-online-operator:1.3-8",
                "fuse7/fuse-postgres-exporter:1.3-3",
                "fuse7/fuse-camel-k:1.3-3"
        ]
]

def brewBuilds = [
        'amq-online': [
                "amq7/amq-online-1-topic-forwarder:1.1-4",
                "amq7/amq-online-1-address-space-controller:1.1-4",
                "amq7/amq-online-1-agent:1.1-4",
                "amq7/amq-online-1-api-server:1.1-4",
                "amq7/amq-online-1-auth-plugin:1.1-4",
                "amq7/amq-online-1-broker-plugin:1.1-4",
                "amq7/amq-online-1-console-httpd:1.1-4",
                "amq7/amq-online-1-console-init:1.1-4",
                "amq7/amq-online-1-controller-manager:1.1-4",
                "amq7-tech-preview/amq-online-1-iot-auth-service:1.1-4",
                "amq7-tech-preview/amq-online-1-iot-gc:1.1-4",
                "amq7-tech-preview/amq-online-1-iot-http-adapter:1.1-6",
                "amq7-tech-preview/amq-online-1-iot-mqtt-adapter:1.1-4",
                "amq7-tech-preview/amq-online-1-iot-device-registry-file:1.1-3",
                "amq7-tech-preview/amq-online-1-iot-proxy-configurator:1.1-5",
                "amq7-tech-preview/amq-online-1-iot-tenant-service:1.1-4",
                "amq7/amq-online-1-mqtt-gateway:1.1-4",
                "amq7/amq-online-1-mqtt-lwt:1.1-4",
                "amq7/amq-online-1-none-auth-service:1.1-4",
                "amq7/amq-online-1-service-broker:1.1-4",
                "amq7/amq-online-1-standard-controller:1.1-4"
        ],
        '3scale': [
                "3scale-amp25/apicast-gateway:1.14-8",
                "3scale-amp25/backend:1.8-1",
                "3scale-amp25/system:1.9-8",
                "3scale-amp25/zync:1.8-3",
                "3scale-amp25/3scale-operator:1.8-4"
        ],
        'fuse-online': [
                "fuse7/fuse-java-openshift:1.3-9",
                "fuse7/fuse-karaf-openshift:1.3-6",
                "fuse7/fuse-console:1.3-5",
                "fuse7/fuse-console-operator:1.3-3",
                "fuse7/fuse-eap-openshift:1.3-3",
                "fuse7/fuse-apicurito-generator:1.3-4",
                "fuse7/fuse-apicurito:1.3-4",
                "fuse7/apicurito-operator:1.0-5",
                "fuse7/fuse-ignite-meta:1.3-16",
                "fuse7/fuse-ignite-s2i:1.3-16",
                "fuse7/fuse-ignite-ui:1.3-10",
                "fuse7/fuse-ignite-server:1.3-16",
                "fuse7/fuse-ignite-upgrade:1.3-9",
                "fuse7/fuse-online-operator:1.3-9",
                "fuse7/fuse-postgres-exporter:1.3-4",
                "fuse7/fuse-camel-k:1.3-3"
        ]
]

def brewProjects = [
        'amq-online': [
                "amq7",
                "amq7-tech-preview"
        ],
        '3scale': [
                "3scale-amp25"
        ],
        'fuse-online': [
                "fuse7"
        ]
]

stage("Cluster Options") {
    def clusterAdminCredentials = setClusterAdminCredentials()
    clusterOptions.openshiftMasterUrl = params.openshiftMasterUrl
    clusterOptions.productName = params.productName
    clusterOptions.clusterAdminUsername = params.clusterAdminUsername ?: clusterAdminCredentials.clusterAdminUsername // Defaults to the username stored in tower-openshift-cluster-credentials
    clusterOptions.clusterAdminPassword = params.clusterAdminPassword ?: clusterAdminCredentials.clusterAdminPassword // Defaults to the password stored in tower-openshift-cluster-credentials
    verifyClusterOptions(clusterOptions)
    println "Cluster Options: ${clusterOptions}"
    currentBuild.displayName = "${currentBuild.displayName} ${clusterOptions.productName}"
    currentBuild.description = clusterOptions.openshiftMasterUrl
}

String clusterContainerRegistryConsole = "registry-console-default.apps.${getHost(clusterOptions.openshiftMasterUrl)}"
String clusterContainerRegistryPublic = "docker-registry-default.apps.${getHost(clusterOptions.openshiftMasterUrl)}"
String clusterContainerRegistryPrivate = "docker-registry.default.svc:5000"

node('cirhos_rhel7') {
    cleanWs()
    stage('Sync Images') {
        sh "oc login ${clusterOptions.openshiftMasterUrl} -u ${clusterOptions.clusterAdminUsername} -p ${clusterOptions.clusterAdminPassword} --insecure-skip-tls-verify"
        clusterOptions.clusterAdminAuthToken = sh(returnStdout: true, script: "oc whoami -t").trim()

        println "Cluster Options: ${clusterOptions}"

        brewProjects[clusterOptions.productName].each {
            println "Brew Project: ${it}"
            sh "oc new-project ${it} || true"
            println "https://${clusterContainerRegistryConsole}/registry#/projects/${it}"
        }

        //Note: These projects need to allow Anonymous pull access in the registry https://registry-console-default.apps.intly01.skunkhenry.com/registry#/projects/amq7
        //Currently needs to be done manually
        input 'Please ensure the above registry projects have the "Anonymous: Allow all unauthenticated users to pull images" under membership, Continue?'

        brewBuilds[clusterOptions.productName].each {
            String brewImageUrl = "${brewContainerRegistry}/${it}"
            String clusterImageUrlPub = "${clusterContainerRegistryPublic}/${it}"
            String clusterImageUrlPrv = "${clusterContainerRegistryPrivate}/${it}"
            String rhImageUrl = "${rhContainerRegistry}/${it}".substring(0, "${rhContainerRegistry}/${it}".length() - 2)
            String rhImageUrl2 = "${rhContainerRegistry2}/${it}".substring(0, "${rhContainerRegistry2}/${it}".length() - 2)

            println "Brew Image: ${brewImageUrl}\nCluster Image Pub: ${clusterImageUrlPub}\nCluster Image Prv: ${clusterImageUrlPrv}\nRH Image: ${rhImageUrl}"

            String rhImageUrlEscaped = rhImageUrl.replace("/", "\\/")
            String rhImageUrl2Escaped = rhImageUrl2.replace("/", "\\/")
            String clusterImageUrlPrvEscaped = clusterImageUrlPrv.replace("/", "\\/")

            //AMQ Online Updating templates with private cluster image url
//            println("find . -name '*.yaml' -exec sed -i -e 's/${rhImageUrlEscaped}/${clusterImageUrlPrvEscaped}/g' {} \\;")

            //Fuse Online
            //println("find . -name '*.yml' -exec sed -i -e 's/${brewContainerRegistry}/${clusterContainerRegistryPrivate}/g' {} \\;")

            //3Scale
            //cd pkg/3scale/amp/auto-generated-templates/productized_templates/amp
            //println("find . -name '*.yml' -exec sed -i -e 's/${rhImageUrl2Escaped}/${clusterImageUrlPrvEscaped}/g' {} \\;")

            retry(3) {
                sh """
                skopeo copy \
                  --dest-creds ${clusterOptions.clusterAdminUsername}:${clusterOptions.clusterAdminAuthToken} \
                  --dest-tls-verify=false \
                  --src-tls-verify=false \
                  docker://${brewImageUrl} \
                  docker://${clusterImageUrlPub}
               """
            }
        }
    }
}
